# Install dependencies needed to build the documentation.
ENV["JULIA_PKGDIR"] = joinpath(@__DIR__, "deps")
using Pkg
Pkg.init()
cp(joinpath(@__DIR__, "REQUIRE"), Pkg.dir("REQUIRE"); force = true)
Pkg.update()
Pkg.resolve()

using Documenter

# Include the `build_sysimg` file.

baremodule GenStdLib end
@isdefined(build_sysimg) || @eval module BuildSysImg
    include(joinpath(@__DIR__, "..", "contrib", "build_sysimg.jl"))
end

# Documenter Setup.

symlink_q(tgt, link) = isfile(link) || symlink(tgt, link)
cp_q(src, dest) = isfile(dest) || cp(src, dest)

# make links for stdlib package docs, this is needed until #522 in Documenter.jl is finished
const STDLIB_DOCS = []
const STDLIB_DIR = joinpath(@__DIR__, "..", "stdlib")
cd(joinpath(@__DIR__, "src")) do
    Base.rm("stdlib"; recursive=true, force=true)
    mkdir("stdlib")
    idx = 1
    for dir in readdir(STDLIB_DIR)
        sourcefile = joinpath(STDLIB_DIR, dir, "docs", "src", "index.md")
        if isfile(sourcefile)
            targetfile = joinpath("stdlib", dir * ".md")
            title = "**3.$(idx).** " * dir
            idx += 1
            push!(STDLIB_DOCS, (stdlib = Symbol(dir), targetfile = targetfile, title = title))
            if Sys.iswindows()
                cp_q(sourcefile, targetfile)
            else
                symlink_q(sourcefile, targetfile)
            end
        end
    end
end

# Generate a suitable markdown file from NEWS.md and put it in src
str = read(joinpath(@__DIR__, "..", "NEWS.md"), String)
splitted = split(str, "<!--- generated by NEWS-update.jl: -->")
@assert length(splitted) == 2
replaced_links = replace(splitted[1], r"\[\#([0-9]*?)\]" => s"[#\g<1>](https://github.com/JuliaLang/julia/issues/\g<1>)")
write(joinpath(@__DIR__, "src", "NEWS.md"), replaced_links)

const PAGES = [
    "**Home**" => "index.md",
    hide("NEWS.md"),
    "**1. Manual**" => [
        "**1.1.** Introduction" => "manual/introduction.md",
        "**1.2.** Getting Started" => "manual/getting-started.md",
        "**1.3.** Variables" => "manual/variables.md",
        "**1.4.** Integers and Floating-Point Numbers" => "manual/integers-and-floating-point-numbers.md",
        "**1.5.** Mathematical Operations and Elementary Functions" => "manual/mathematical-operations.md",
        "**1.6.** Complex and Rational Numbers" => "manual/complex-and-rational-numbers.md",
        "**1.7.** Strings" => "manual/strings.md",
        "**1.8.** Functions" => "manual/functions.md",
        "**1.9.** Control Flow" => "manual/control-flow.md",
        "**1.10.** Scope of Variables" => "manual/variables-and-scoping.md",
        "**1.11.** Types" => "manual/types.md",
        "**1.12.** Methods" => "manual/methods.md",
        "**1.13.** Constructors" => "manual/constructors.md",
        "**1.14.** Conversion and Promotion" => "manual/conversion-and-promotion.md",
        "**1.15.** Interfaces" => "manual/interfaces.md",
        "**1.16.** Modules" => "manual/modules.md",
        "**1.17.** Documentation" => "manual/documentation.md",
        "**1.18.** Metaprogramming" => "manual/metaprogramming.md",
        "**1.19.** Multi-dimensional Arrays" => "manual/arrays.md",
        "**1.20.** Missing Values" => "manual/missing.md",
        "**1.21.** Networking and Streams" => "manual/networking-and-streams.md",
        "**1.22.** Parallel Computing" => "manual/parallel-computing.md",
        "**1.23.** Running External Programs" => "manual/running-external-programs.md",
        "**1.24.** Calling C and Fortran Code" => "manual/calling-c-and-fortran-code.md",
        "**1.25.** Handling Operating System Variation" => "manual/handling-operating-system-variation.md",
        "**1.26.** Environment Variables" => "manual/environment-variables.md",
        "**1.27.** Embedding Julia" => "manual/embedding.md",
        "**1.28.** Packages" => "manual/packages.md",
        "**1.29.** Code Loading" => "manual/code-loading.md",
        "**1.30.** Profiling" => "manual/profile.md",
        "**1.31.** Stack Traces" => "manual/stacktraces.md",
        "**1.32.** Performance Tips" => "manual/performance-tips.md",
        "**1.33.** Workflow Tips" => "manual/workflow-tips.md",
        "**1.34.** Style Guide" => "manual/style-guide.md",
        "**1.35.** Frequently Asked Questions" => "manual/faq.md",
        "**1.36.** Noteworthy Differences from other Languages" => "manual/noteworthy-differences.md",
        "**1.37.** Unicode Input" => "manual/unicode-input.md",
    ],
    "**2. Base**" => [
        "**2.1.** Essentials"  => "base/base.md",
        "**2.2.** Collections and Data Structures"  => "base/collections.md",
        "**2.3.** Mathematics"  => "base/math.md",
        "**2.4.** Numbers"  => "base/numbers.md",
        "**2.5.** Strings"  => "base/strings.md",
        "**2.6.** Arrays"  => "base/arrays.md",
        "**2.7.** Tasks"  => "base/parallel.md",
        "**2.8.** Multi-Threading"  => "base/multi-threading.md",
        "**2.9.** Constants"  => "base/constants.md",
        "**2.10.** Filesystem" => "base/file.md",
        "**2.11.** I/O and Network" => "base/io-network.md",
        "**2.12.** Punctuation" => "base/punctuation.md",
        "**2.13.** Sorting and Related Functions" => "base/sort.md",
        "**2.14.** Iteration utilities" => "base/iterators.md",
        "**2.15.** C Interface" => "base/c.md",
        "**2.16.** C Standard Library" => "base/libc.md",
        "**2.17.** StackTraces" => "base/stacktraces.md",
        "**2.18.** SIMD Support" => "base/simd-types.md",
    ],
    "**3. Standard Library**" =>
        [stdlib.title => stdlib.targetfile for stdlib in STDLIB_DOCS],
    "**4. Developer Documentation**" => [
        "**4.1** Reflection and introspection" => "devdocs/reflection.md",
        "*Documentation of Julia's Internals*" => [
            "**4.2** Initialization of the Julia runtime" => "devdocs/init.md",
            "**4.3** Julia ASTs" => "devdocs/ast.md",
            "**4.4** More about types" => "devdocs/types.md",
            "**4.5** Memory layout of Julia Objects" => "devdocs/object.md",
            "**4.6** Eval of Julia code" => "devdocs/eval.md",
            "**4.7** Calling Conventions" => "devdocs/callconv.md",
            "**4.8** High-level Overview of the Native-Code Generation Process" => "devdocs/compiler.md",
            "**4.9** Julia Functions" => "devdocs/functions.md",
            "**4.10** Base.Cartesian" => "devdocs/cartesian.md",
            "**4.11** Talking to the compiler (the `:meta` mechanism)" => "devdocs/meta.md",
            "**4.12** SubArrays" => "devdocs/subarrays.md",
            "**4.13** System Image Building" => "devdocs/sysimg.md",
            "**4.14** Working with LLVM" => "devdocs/llvm.md",
            "**4.15** printf() and stdio in the Julia runtime" => "devdocs/stdio.md",
            "**4.16** Bounds checking" => "devdocs/boundscheck.md",
            "**4.17** Proper maintenance and care of multi-threading locks" => "devdocs/locks.md",
            "**4.18** Arrays with custom indices" => "devdocs/offset-arrays.md",
            "**4.19** Module loading" => "devdocs/require.md",
            "**4.20** Inference" => "devdocs/inference.md",
        ],
        "*Developing/debugging Julia's C code*" => [
            "**4.21** Reporting and analyzing crashes (segfaults)" => "devdocs/backtraces.md",
            "**4.22** gdb debugging tips" => "devdocs/debuggingtips.md",
            "**4.23** Using Valgrind with Julia" => "devdocs/valgrind.md",
            "**4.24** Sanitizer support" => "devdocs/sanitizers.md",
            "**4.25** Static analyzer annotations for GC correctness in C code" => "devdocs/gc-sa.md",
        ]
    ],
]

for stdlib in STDLIB_DOCS
    @eval using $(stdlib.stdlib)
end

makedocs(
    build     = joinpath(@__DIR__, "_build/html/en"),
    modules   = [Base, Core, BuildSysImg, [Base.root_module(Base, stdlib.stdlib) for stdlib in STDLIB_DOCS]...],
    clean     = true,
    doctest   = ("doctest-fix" in ARGS) ? (:fix) : ("doctest" in ARGS),
    linkcheck = "linkcheck" in ARGS,
    linkcheck_ignore = ["https://bugs.kde.org/show_bug.cgi?id=136779"], # fails to load from nanosoldier?
    strict    = false,
    checkdocs = :none,
    format    = "pdf" in ARGS ? :latex : :html,
    sitename  = "The Julia Language",
    authors   = "The Julia Project",
    analytics = "UA-28835595-6",
    pages     = PAGES,
    html_prettyurls = ("deploy" in ARGS),
    html_canonical = ("deploy" in ARGS) ? "https://docs.julialang.org/en/stable/" : nothing,
    assets = ["assets/julia-manual.css", ]
)

if "deploy" in ARGS
    # Only deploy docs from 64bit Linux to avoid committing multiple versions of the same
    # docs from different workers.
    (Sys.ARCH === :x86_64 && Sys.KERNEL === :Linux) || return

    # Since the `.travis.yml` config specifies `language: cpp` and not `language: julia` we
    # need to manually set the version of Julia that we are deploying the docs from.
    ENV["TRAVIS_JULIA_VERSION"] = "nightly"

    deploydocs(
        repo = "github.com/JuliaLang/julia.git",
        target = "_build/html/en",
        dirname = "en",
        deps = nothing,
        make = nothing,
    )
end
